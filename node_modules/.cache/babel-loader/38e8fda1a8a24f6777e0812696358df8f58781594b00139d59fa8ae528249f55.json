{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/GitHub/game-of-life-react/src/components/GameOfLife.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell.tsx\";\n\n// Define the type for the grid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initGrid = (numRows, numCols, density) => {\n  const rows = Array(numRows).fill(0).map(() => Array(numCols).fill(0).map(() => Math.random() < density));\n  return rows;\n};\nconst GameOfLife = props => {\n  _s();\n  const [grid, setGrid] = useState(() => initGrid(props.numRows, props.numCols, props.density));\n  const runSimulation = () => {\n    setGrid(g => {\n      return g.map((row, i) => row.map((cell, j) => {\n        const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n        let liveNeighbors = 0;\n        neighbors.forEach(([x, y]) => {\n          if (x >= 0 && x < props.numRows && y >= 0 && y < props.numCols && g[x][y]) {\n            liveNeighbors += 1;\n          }\n        });\n        if (cell && (liveNeighbors < 2 || liveNeighbors > 3)) {\n          return false;\n        }\n        if (!cell && liveNeighbors === 3) {\n          return true;\n        }\n        return cell;\n      }));\n    });\n  };\n  useEffect(() => {\n    setInterval(runSimulation, props.interval);\n  }, []);\n  const toggleCellState = (row, col) => {\n    const newGrid = grid.map((r, i) => r.map((cell, j) => i === row && j === col ? !cell : cell));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setGrid(initGrid(props.numRows, props.numCols, props.density)),\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${props.numCols}, 20px)`\n      },\n      children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n        isAlive: cell,\n        toggleCell: () => toggleCellState(i, j)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(GameOfLife, \"mV6uySr4/CesC1ah9zY/rioz48A=\");\n_c = GameOfLife;\nGameOfLife.defaultProps = {\n  numRows: 30,\n  numCols: 50,\n  density: 0.2,\n  interval: 1000\n};\nexport default GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","initGrid","numRows","numCols","density","rows","Array","fill","map","Math","random","GameOfLife","props","_s","grid","setGrid","runSimulation","g","row","i","cell","j","neighbors","liveNeighbors","forEach","x","y","setInterval","interval","toggleCellState","col","newGrid","r","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","display","gridTemplateColumns","isAlive","toggleCell","_c","defaultProps","$RefreshReg$"],"sources":["/Users/apple/Documents/GitHub/game-of-life-react/src/components/GameOfLife.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell.tsx\";\n\n// Define the type for the grid\ntype Grid = boolean[][];\ntype GameOfLifeProps = {\n    numRows: number, \n    numCols: number, \n    density: number,\n    interval: number\n}\n\nconst initGrid = (numRows, numCols, density): Grid => {\n  const rows = Array(numRows).fill(0).map(() => Array(numCols).fill(0).map(() => Math.random() < density));\n  return rows;\n};\n\nconst GameOfLife = (props: GameOfLifeProps) => {\n  const [grid, setGrid] = useState<Grid>(() => initGrid(props.numRows, props.numCols, props.density));\n\n  const runSimulation = () => {\n    setGrid((g) => {\n      return g.map((row, i) =>\n        row.map((cell, j) => {\n          const neighbors = [\n            [i - 1, j - 1],\n            [i - 1, j],\n            [i - 1, j + 1],\n            [i, j - 1],\n            [i, j + 1],\n            [i + 1, j - 1],\n            [i + 1, j],\n            [i + 1, j + 1],\n          ];\n\n          let liveNeighbors = 0;\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < props.numRows && y >= 0 && y < props.numCols && g[x][y]) {\n              liveNeighbors += 1;\n            }\n          });\n\n          if (cell && (liveNeighbors < 2 || liveNeighbors > 3)) {\n            return false;\n          }\n          if (!cell && liveNeighbors === 3) {\n            return true;\n          }\n          return cell;\n        })\n      );\n    });\n  };\n\n  useEffect(() => {\n    setInterval(runSimulation, props.interval)\n  }, [])\n\n  const toggleCellState = (row: number, col: number) => {\n    const newGrid = grid.map((r, i) =>\n      r.map((cell, j) => (i === row && j === col ? !cell : cell))\n    );\n    setGrid(newGrid);\n  };\n\n  return (\n    <div>\n      <button\n        onClick={() => setGrid(initGrid( props.numRows, props.numCols, props.density))}\n      >\n        Clear\n      </button>\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${props.numCols}, 20px)`,\n        }}\n      >\n        {grid.map((row, i) =>\n          row.map((cell, j) => (\n            <Cell\n              key={`${i}-${j}`}\n              isAlive={cell}\n              toggleCell={() => toggleCellState(i, j)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nGameOfLife.defaultProps = {\n    numRows: 30,\n    numCols: 50,\n    density: 0.2,\n    interval: 1000\n}\nexport default GameOfLife;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,YAAY;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,QAAQ,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,OAAO,KAAW;EACpD,MAAMC,IAAI,GAAGC,KAAK,CAACJ,OAAO,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAACH,OAAO,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGN,OAAO,CAAC,CAAC;EACxG,OAAOC,IAAI;AACb,CAAC;AAED,MAAMM,UAAU,GAAIC,KAAsB,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAO,MAAMK,QAAQ,CAACW,KAAK,CAACV,OAAO,EAAEU,KAAK,CAACT,OAAO,EAAES,KAAK,CAACR,OAAO,CAAC,CAAC;EAEnG,MAAMY,aAAa,GAAGA,CAAA,KAAM;IAC1BD,OAAO,CAAEE,CAAC,IAAK;MACb,OAAOA,CAAC,CAACT,GAAG,CAAC,CAACU,GAAG,EAAEC,CAAC,KAClBD,GAAG,CAACV,GAAG,CAAC,CAACY,IAAI,EAAEC,CAAC,KAAK;QACnB,MAAMC,SAAS,GAAG,CAChB,CAACH,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,EACd,CAACF,CAAC,GAAG,CAAC,EAAEE,CAAC,CAAC,EACV,CAACF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,EACd,CAACF,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,EACV,CAACF,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,EACV,CAACF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,EACd,CAACF,CAAC,GAAG,CAAC,EAAEE,CAAC,CAAC,EACV,CAACF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,CAAC,CACf;QAED,IAAIE,aAAa,GAAG,CAAC;QACrBD,SAAS,CAACE,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;UAC5B,IAAID,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGb,KAAK,CAACV,OAAO,IAAIwB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGd,KAAK,CAACT,OAAO,IAAIc,CAAC,CAACQ,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE;YACzEH,aAAa,IAAI,CAAC;UACpB;QACF,CAAC,CAAC;QAEF,IAAIH,IAAI,KAAKG,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAG,CAAC,CAAC,EAAE;UACpD,OAAO,KAAK;QACd;QACA,IAAI,CAACH,IAAI,IAAIG,aAAa,KAAK,CAAC,EAAE;UAChC,OAAO,IAAI;QACb;QACA,OAAOH,IAAI;MACb,CAAC,CACH,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd8B,WAAW,CAACX,aAAa,EAAEJ,KAAK,CAACgB,QAAQ,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGA,CAACX,GAAW,EAAEY,GAAW,KAAK;IACpD,MAAMC,OAAO,GAAGjB,IAAI,CAACN,GAAG,CAAC,CAACwB,CAAC,EAAEb,CAAC,KAC5Ba,CAAC,CAACxB,GAAG,CAAC,CAACY,IAAI,EAAEC,CAAC,KAAMF,CAAC,KAAKD,GAAG,IAAIG,CAAC,KAAKS,GAAG,GAAG,CAACV,IAAI,GAAGA,IAAK,CAC5D,CAAC;IACDL,OAAO,CAACgB,OAAO,CAAC;EAClB,CAAC;EAED,oBACE/B,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MACEkC,OAAO,EAAEA,CAAA,KAAMnB,OAAO,CAACd,QAAQ,CAAEW,KAAK,CAACV,OAAO,EAAEU,KAAK,CAACT,OAAO,EAAES,KAAK,CAACR,OAAO,CAAC,CAAE;MAAA6B,QAAA,EAChF;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTtC,OAAA;MACEuC,KAAK,EAAE;QACLC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,MAAM;QACfC,mBAAmB,EAAE,UAAU/B,KAAK,CAACT,OAAO;MAC9C,CAAE;MAAA8B,QAAA,EAEDnB,IAAI,CAACN,GAAG,CAAC,CAACU,GAAG,EAAEC,CAAC,KACfD,GAAG,CAACV,GAAG,CAAC,CAACY,IAAI,EAAEC,CAAC,kBACdrB,OAAA,CAACF,IAAI;QAEH8C,OAAO,EAAExB,IAAK;QACdyB,UAAU,EAAEA,CAAA,KAAMhB,eAAe,CAACV,CAAC,EAAEE,CAAC;MAAE,GAFnC,GAAGF,CAAC,IAAIE,CAAC,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGjB,CACF,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CA3EIF,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AA6EhBA,UAAU,CAACoC,YAAY,GAAG;EACtB7C,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,GAAG;EACZwB,QAAQ,EAAE;AACd,CAAC;AACD,eAAejB,UAAU;AAAC,IAAAmC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}