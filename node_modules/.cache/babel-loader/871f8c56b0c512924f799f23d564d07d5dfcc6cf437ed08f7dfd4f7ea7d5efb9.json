{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/GitHub/game-of-life-react/src/components/GameOfLife.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell.tsx\";\n\n// Define the type for the grid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 30;\nconst numCols = 50;\nconst generateEmptyGrid = () => {\n  const rows = Array(numRows).fill().map(() => Array(numCols).fill().map(() => Math.random() < 0.3));\n  return rows;\n};\nconst GameOfLife = () => {\n  _s();\n  const [grid, setGrid] = useState(() => generateEmptyGrid());\n  const [running, setRunning] = useState(false);\n  const runSimulation = () => {\n    console.log(running);\n    if (!running) return;\n    setGrid(g => {\n      return g.map((row, i) => row.map((cell, j) => {\n        const neighbors = [[i - 1, j - 1], [i - 1, j], [i - 1, j + 1], [i, j - 1], [i, j + 1], [i + 1, j - 1], [i + 1, j], [i + 1, j + 1]];\n        let liveNeighbors = 0;\n        neighbors.forEach(([x, y]) => {\n          if (x >= 0 && x < numRows && y >= 0 && y < numCols && g[x][y]) {\n            liveNeighbors += 1;\n          }\n        });\n        if (cell && (liveNeighbors < 2 || liveNeighbors > 3)) {\n          return false;\n        }\n        if (!cell && liveNeighbors === 3) {\n          return true;\n        }\n        return cell;\n      }));\n    });\n  };\n  useEffect(() => {\n    setInterval(runSimulation, 1000);\n  }, []);\n  const toggleRunning = () => {\n    setRunning(!running);\n  };\n  const toggleCellState = (row, col) => {\n    const newGrid = grid.map((r, i) => r.map((cell, j) => i === row && j === col ? !cell : cell));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleRunning,\n      children: running ? \"Stop\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setGrid(generateEmptyGrid()),\n      disabled: running,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      },\n      children: grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(Cell, {\n        isAlive: cell,\n        toggleCell: () => toggleCellState(i, j)\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(GameOfLife, \"PzIyyRJfnwsFnxYwIbri25mJUbs=\");\n_c = GameOfLife;\nexport default GameOfLife;\nvar _c;\n$RefreshReg$(_c, \"GameOfLife\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","numRows","numCols","generateEmptyGrid","rows","Array","fill","map","Math","random","GameOfLife","_s","grid","setGrid","running","setRunning","runSimulation","console","log","g","row","i","cell","j","neighbors","liveNeighbors","forEach","x","y","setInterval","toggleRunning","toggleCellState","col","newGrid","r","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","style","display","gridTemplateColumns","isAlive","toggleCell","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/GitHub/game-of-life-react/src/components/GameOfLife.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell.tsx\";\n\n// Define the type for the grid\ntype Grid = boolean[][];\n\nconst numRows = 30;\nconst numCols = 50;\n\nconst generateEmptyGrid = (): Grid => {\n  const rows = Array(numRows).fill().map(() => Array(numCols).fill().map(() => Math.random() < 0.3));\n  return rows;\n};\n\nconst GameOfLife: React.FC = () => {\n  const [grid, setGrid] = useState<Grid>(() => generateEmptyGrid());\n  const [running, setRunning] = useState<boolean>(false);\n\n  const runSimulation = () => {\n    console.log(running)\n    if (!running) return;\n\n    setGrid((g) => {\n      return g.map((row, i) =>\n        row.map((cell, j) => {\n          const neighbors = [\n            [i - 1, j - 1],\n            [i - 1, j],\n            [i - 1, j + 1],\n            [i, j - 1],\n            [i, j + 1],\n            [i + 1, j - 1],\n            [i + 1, j],\n            [i + 1, j + 1],\n          ];\n\n          let liveNeighbors = 0;\n          neighbors.forEach(([x, y]) => {\n            if (x >= 0 && x < numRows && y >= 0 && y < numCols && g[x][y]) {\n              liveNeighbors += 1;\n            }\n          });\n\n          if (cell && (liveNeighbors < 2 || liveNeighbors > 3)) {\n            return false;\n          }\n          if (!cell && liveNeighbors === 3) {\n            return true;\n          }\n          return cell;\n        })\n      );\n    });\n  };\n\n  useEffect(() => {\n    setInterval(runSimulation, 1000)\n  }, [])\n\n  const toggleRunning = () => {\n    setRunning(!running);\n  };\n\n  const toggleCellState = (row: number, col: number) => {\n    const newGrid = grid.map((r, i) =>\n      r.map((cell, j) => (i === row && j === col ? !cell : cell))\n    );\n    setGrid(newGrid);\n  };\n\n  return (\n    <div>\n      <button onClick={toggleRunning}>\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n      <button\n        onClick={() => setGrid(generateEmptyGrid())}\n        disabled={running}\n      >\n        Clear\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((row, i) =>\n          row.map((cell, j) => (\n            <Cell\n              key={`${i}-${j}`}\n              isAlive={cell}\n              toggleCell={() => toggleCellState(i, j)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameOfLife;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}